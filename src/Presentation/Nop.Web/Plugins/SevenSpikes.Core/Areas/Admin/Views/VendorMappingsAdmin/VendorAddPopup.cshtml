@{
    Layout = AdminViewLocations.AdminPopupLayoutViewPath;
}

@model VendorSearchModel
@inject AdminAreaSettings adminAreaSettings

@{
    if (ViewBag.RefreshPage == true)
    {
        <script type="text/javascript">
            try
            {
                var gridElement = window.opener.document.getElementById("@ViewBag.btnId");
                $(gridElement).click();
            }
            catch (e){}
            window.close();
        </script>

        return;
    }

    var defaultGridPageSize = adminAreaSettings.DefaultGridPageSize;
    var popupGridPageSize = adminAreaSettings.PopupGridPageSize;
    var gridPageSizes = adminAreaSettings.GridPageSizes;

    //page title
    ViewBag.PageTitle = T("Admin.Vendors").Text;

    var entityType = Model.CustomProperties.ContainsKey("EntityType") ? Model.CustomProperties["EntityType"] : null;
    var entityId = Model.CustomProperties.ContainsKey("EntityId") ? Model.CustomProperties["EntityId"] : 0;
}

<form method="post">
    <nop-antiforgery-token />

    <div class="content-header clearfix">
        <h1 class="float-left">
            @T("Admin.Common.AddNew")
        </h1>
        <div class="float-right">
            &nbsp;
        </div>
    </div>

    <section class="content">
        <div class="form-horizontal">
            <div class="cards-group">
                <div class="card card-default card-search card-search-popup card-popup">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="form-group row">
                                    <div class="col-sm-4">
                                        <nop-label asp-for="SearchName" />
                                    </div>
                                    <div class="col-sm-8">
                                        <nop-editor asp-for="SearchName" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <button type="button" id="search-vendors" class="btn btn-primary btn-search">
                                    <i class="fa fa-search"></i>
                                    @T("Admin.Common.Search")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card card-default">
                    <div class="card-body">
                        @await Html.PartialAsync("Table", new DataTablesModel
                        {
                            Name = "vendors-grid",
                            UrlRead = new DataUrl("VendorAddPopupList", "VendorMappingsAdmin", new RouteValueDictionary { ["entityType"] = entityType, ["entityId"] = entityId }),
                            Length = defaultGridPageSize,
                            LengthMenu = gridPageSizes,
                            SearchButtonId = "search-vendors",
                            Filters = new List<FilterParameter>
                            {
                                new FilterParameter(nameof(Model.SearchName))
                            },
                            ColumnCollection = new List<ColumnProperty>
                            {
                                new ColumnProperty(nameof(VendorModel.Id))
                                {
                                    IsMasterCheckBox = true,
                                    Width = "100",
                                    Render = new RenderCustom("renderSelectedCheckBox")
                                },
                                new ColumnProperty(nameof(VendorModel.Name))
                                {
                                    Width = "100",
                                    Title = T("Admin.Vendors.Fields.Name").Text
                                },
                                new ColumnProperty(nameof(VendorModel.Active))
                                {
                                    Title = T("Admin.Vendors.Fields.Active").Text,
                                    Width = "100",
                                    Render = new RenderCustom("renderPublished")
                                }
                            }
                        })

                        <script>

                            function renderPublished(data, type, row, meta) {

                                if (row.Published) {

                                    return '<i class="fa fa-check true-icon"></i>';
                                }
                                else {

                                    return '<i class="fa fa-close false-icon"></i>';
                                }
                            }

                            function renderSelectedCheckBox(data, type, row, meta) {

                                console.log(row.CustomProperties.Selected)

                                var checked = row.CustomProperties.Selected ? 'checked' : '';

                                return '<input type="checkbox" id="SelectedVendorIds" name="SelectedVendorIds" value="' + row.Id + '" class="checkboxGroups" ' + checked + '>';
                            }
                                                                
                            function updateMasterCheckbox() {
                                var numChkBoxes = $('#vendors-grid input[type=checkbox][id!=mastercheckbox]').length;
                                var numChkBoxesChecked = $('#vendors-grid input[type=checkbox][id!=mastercheckbox]:checked').length;
                                $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
                            }
                                
                            function onDataBound(e) {
                                $('#vendors-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
                                    var currentId = $(this).val();
                                    var checked = jQuery.inArray(currentId, selectedIds);
                                    //set checked based on if current checkbox's value is in selectedIds.
                                    $(this).attr('checked', checked > -1);
                                });

                                updateMasterCheckbox();
                            }

                            var selectedIds = [];

                            $(document).ready(function () {

                                $("#@Html.IdFor(model => model.SearchName)").keydown(function (event) {

                                    if (event.keyCode == 13) {
                                        $("#search-vendors").click();
                                        return false;
                                    }
                                });

                                $('#mastercheckbox').click(function () {
                                    $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
                                });

                                //wire up checkboxes.
                                $('#vendors-grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function (e) {
                                    var $check = $(this);
                                    if ($check.is(":checked") == true) {
                                        var checked = jQuery.inArray($check.val(), selectedIds);
                                        if (checked == -1) {
                                            //add id to selectedIds.
                                            selectedIds.push($check.val());
                                        }
                                    }
                                    else {
                                        var checked = jQuery.inArray($check.val(), selectedIds);
                                        if (checked > -1) {
                                            //remove id from selectedIds.
                                            selectedIds = $.grep(selectedIds, function (item, index) {
                                                return item != $check.val();
                                            });
                                        }
                                    }
                                    updateMasterCheckbox();
                                });
                            });
                        </script>

                    </div>
                    <div class="card-footer">
                        <button type="submit" name="save" class="btn bg-primary">
                            <i class="far fa-save"></i>
                            @T("Admin.Common.Save")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </section>
</form>