@model FooterModel
@using Nop.Core
@using Nop.Core.Domain.Tax
@using Nop.Services.Configuration
@inject IStoreContext storeContext
@inject IWorkContext workContext
@inject ISettingService settingService

@{
    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;
    var removeCopyright = await settingService.GetSettingByKeyAsync("pacificthemesettings.removecopyright", false, storeId, true);
    var removeDesignedBy = await settingService.GetSettingByKeyAsync("pacificthemesettings.removedesignedby", false, storeId, true);
}

<div class="footer">
    <div class="footer-upper">
        <div class="footer-blocks-wrapper center">
            <div class="footer-block-center">
                @await Component.InvokeAsync("NewsletterBox")
                @await Component.InvokeAsync("SocialButtons")
            </div>
        </div>
        <div class="footer-blocks-wrapper left">
            <div class="footer-block contact">
                <div class="title">
                    <strong>@T("SevenSpikes.Themes.Pacific.Common.ContactInfo")</strong>
                </div>
                <ul class="list footer-collapse">
                    <li class="phone">
                        <span>@T("SevenSpikes.Themes.Pacific.Common.Phone")</span>
                    </li>
                    <li class="work-time">
                        <span>@T("SevenSpikes.Themes.Pacific.Common.WorkTime")</span>
                    </li>
                    <li class="e-mail">
                        <span>@T("SevenSpikes.Themes.Pacific.Common.EMail")</span>
                    </li>
                    <li class="address-city">
                        <span>@T("SevenSpikes.Themes.Pacific.Common.City")</span>
                    </li>
                    <li class="address-street">
                        <span>@T("SevenSpikes.Themes.Pacific.Common.Street")</span>
                    </li>
                </ul>
            </div>
            <div class="footer-block information">
                <div class="title">
                    <strong>@T("SevenSpikes.Themes.Pacific.Common.Information")</strong>
                </div>
                <ul class="list footer-collapse">                    
                    @if (Model.SitemapEnabled && Model.DisplaySitemapFooterItem)
                    {
                        <li><a href="@Url.RouteUrl("Sitemap")">@T("Sitemap")</a></li>
                    }
                    @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn1).ToList())
                    {
                        <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                    }
                </ul>
            </div>
        </div>
        <div class="footer-blocks-wrapper right">
            <div class="footer-block service">
                <div class="title">
                    <strong>@T("SevenSpikes.Themes.Pacific.Common.CustomerService")</strong>
                </div>
                <ul class="list footer-collapse">
	                @if (Model.SearchEnabled && Model.DisplayProductSearchFooterItem)
	                {
	                    <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a> </li>
	                }
	                @if (Model.NewsEnabled && Model.DisplayNewsFooterItem)
	                {
	                    <li><a href="@Url.RouteUrl("NewsArchive")">@T("News")</a></li>
	                }
	                @if (Model.BlogEnabled && Model.DisplayBlogFooterItem)
	                {
	                    <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
	                }
	                @if (Model.ForumEnabled && Model.DisplayForumsFooterItem)
	                {
	                    <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
	                }
                    @if (Model.RecentlyViewedProductsEnabled && Model.DisplayRecentlyViewedProductsFooterItem)
                    {
                        <li><a href="@Url.RouteUrl("RecentlyViewedProducts")">@T("Products.RecentlyViewedProducts")</a></li>
                    }
	                @if (Model.CompareProductsEnabled && Model.DisplayCompareProductsFooterItem)
	                {
	                    <li><a href="@Url.RouteUrl("CompareProducts")">@T("Products.Compare.List")</a></li>
	                }
	                @if (Model.NewProductsEnabled && Model.DisplayNewProductsFooterItem)
	                {
	                    <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
	                }
	                @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn2).ToList())
	                {
	                    <li><a href="@Url.RouteUrl("Topic", new {SeName = topic.SeName})">@topic.Name</a></li>
	                }
                </ul>
            </div>
            <div class="footer-block account">
                <div class="title">
                    <strong>@T("SevenSpikes.Themes.Pacific.Common.MyAccount")</strong>
                </div>
                <ul class="list footer-collapse">
	                @if (Model.DisplayCustomerInfoFooterItem)
	                {
	                    <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
	                }
	                @if (Model.DisplayCustomerOrdersFooterItem)
	                {
	                    <li><a href="@Url.RouteUrl("CustomerOrders")">@T("Account.CustomerOrders")</a></li>
	                }
	                @if (Model.DisplayCustomerAddressesFooterItem)
	                {
	                    <li><a href="@Url.RouteUrl("CustomerAddresses")">@T("Account.CustomerAddresses")</a></li>
	                }
	                @if (Model.ShoppingCartEnabled && Model.DisplayShoppingCartFooterItem)
	                {
	                    <li><a href="@Url.RouteUrl("ShoppingCart")">@T("ShoppingCart")</a></li>
	                }
	                @if (Model.WishlistEnabled && Model.DisplayWishlistFooterItem)
	                {
	                    <li><a href="@Url.RouteUrl("Wishlist")">@T("Wishlist")</a></li>
	                }
	                @if (Model.AllowCustomersToApplyForVendorAccount && Model.DisplayApplyVendorAccountFooterItem)
	                {
	                    <li><a href="@Url.RouteUrl("ApplyVendorAccount")">@T("Vendors.ApplyAccount")</a></li>
	                }
	                @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn3).ToList())
	                {
	                    <li><a href="@Url.RouteUrl("Topic", new {SeName = topic.SeName})">@topic.Name</a></li>
	                }
                </ul>
            </div> 
        </div>     
    </div>
    <div class="footer-lower">
        <div class="footer-lower-left">
            @if(!removeCopyright)
            { 
                <div class="footer-powered-by">
                    Powered by <a href="@(OfficialSite.Main)">nopCommerce</a>
                    @*Would you like to remove the "Powered by nopCommerce" link in the bottom of the footer?
						Find more info at https://www.nopcommerce.com/nopcommerce-copyright-removal-key*@
                </div>
            }
            @if (!removeDesignedBy)
            {
                <div class="footer-designed-by">
                    Designed by <a href="https://www.nop-templates.com/" target="_blank">Nop-Templates.com</a>
                </div>
            }
        </div>
        <div class="footer-lower-right">
            <div class="footer-disclaimer">
                @T("Content.CopyrightNotice", DateTime.Now.Year, Model.StoreName)
            </div>
            @if (Model.DisplayTaxShippingInfoFooter)
            {
        	    var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                <div class="footer-tax-shipping">
                    @T(inclTax ? "Footer.TaxShipping.InclTax" : "Footer.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeNameAsync("shippinginfo") }))
                </div>
            }
            </div>
        @await Component.InvokeAsync("StoreThemeSelector")
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.Footer })
</div>