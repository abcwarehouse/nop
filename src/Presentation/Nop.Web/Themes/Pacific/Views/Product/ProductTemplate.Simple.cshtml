@model ProductDetailsModel

@using Nop.Core
@using Nop.Core.Domain.Seo;
@using Nop.Services.Configuration

@inject Nop.Core.IWebHelper webHelper 
@inject SeoSettings seoSettings
@inject ISettingService settingService
@inject IStoreContext storeContext

@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;

    var productPageLayout = await settingService.GetSettingByKeyAsync("pacificthemesettings.productpagelayout", "one", storeId, true);
    var productPageLayoutClass = "product-page-layout-" + productPageLayout;
    var isProductPageLayoutOne = string.Compare(productPageLayout, "one", StringComparison.InvariantCultureIgnoreCase) == 0;

    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }

    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }

    /*category navigation*/
    var categoryNavigation = await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId });
}

<div class="page product-details-page @productPageLayoutClass">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <div class="product-details-top">
            @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
			@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
        </div>
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            @if (seoSettings.MicrodataEnabled)
            {
                @await Html.PartialAsync("_Microdata", Model)
            }
            <div class="product-content-wrapper" data-productid="@Model.Id">
                <div class="product-essential">
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
                    <div class="equalizer-box">
                        <div class="gallery-wrapper @if (isProductPageLayoutOne) {<text>equalize</text>}">
                            @{
                                var cloudZoom = await Component.InvokeAsync("Widget", new { widgetZone = "sevenspikes_cloud_zoom", additionalData = Model });
                            }
                            @if (!String.IsNullOrEmpty(await cloudZoom.RenderHtmlContentAsync()))
                            {
                                @cloudZoom
                            }
                            else
                            {
                                <!--product pictures-->
                                @await Html.PartialAsync("_ProductDetailsPictures", Model)
                            }
                            @await Html.PartialAsync("_ShareButton", Model)
                        </div>
                        <div class="overview-wrapper @if (isProductPageLayoutOne) {<text>equalize</text>}">
                            <div class="overview">
								@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                                @await Html.PartialAsync("_Discontinued", Model)
                                <div class="product-overview-top">
                                    <div class="product-name">
                                        <h1>
                                            @Model.Name
                                        </h1>
                                    </div>
                                    <!--product reviews-->
                                    @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                                </div>
                                @if (!string.IsNullOrEmpty(Model.ShortDescription))
                                {
                                    <div class="short-description">
                                        @Html.Raw(Model.ShortDescription)
                                    </div>
                                }
                                <!--price-->
                                @{
                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                    @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                                    @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                                }
                                <!--SKU, MAN, GTIN, vendor-->
                                @{
                                    var productManufacturers = await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers);
                                    var productSkuManGiinVendor = await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model);
                                }
                                @if (!String.IsNullOrEmpty(await productManufacturers.RenderHtmlContentAsync()) || !String.IsNullOrEmpty(await productSkuManGiinVendor.RenderHtmlContentAsync()))
                                {
                                    <div class="overview-info-wrapper">
                                        @productManufacturers
                                        @productSkuManGiinVendor
                                    </div>
                                }
                                <!--availability-->
                                @await Html.PartialAsync("_Availability", Model)

                                <!--delivery-->
                                @await Html.PartialAsync("_DeliveryInfo", Model)

                                <!--estimate shipping-->
                                @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping)

                                <!--attributes-->
                                @{
                                    var dataDictAttributes = new ViewDataDictionary(ViewData);
                                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                                    @await Html.PartialAsync("_ProductAttributes", Model, dataDictAttributes)
                                }
                                <!--gift card-->
                                @{
                                    var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                    dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                                    @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                                }
                                <!--rental info-->
                                @{
                                    var dataDictRental = new ViewDataDictionary(ViewData);
                                    dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                                    @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                                }
                                <div class="overview-buttons-wrapper">
                                    <!--wishlist, compare, email a friend-->
                                    <div class="overview-buttons">
                            			@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                        @{
                                            var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                            dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                            @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                        }
                                        @await Html.PartialAsync("_CompareProductsButton", Model)
                                        @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                        <!--sample download-->
                                        @await Html.PartialAsync("_DownloadSample", Model)
                            			@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                                    </div>
                                    <!--add to cart-->
                                    @{
                                        var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                        dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                        @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                    }
                                </div>
                        		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                            </div>
                            @if (!isProductPageLayoutOne)
                            {
								@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                                <div class="product-collateral">
                                    @if (!string.IsNullOrEmpty(Model.FullDescription))
                                    {
                                        <div class="full-description">
                                            @Html.Raw(Model.FullDescription)
                                        </div>
                                    }
                                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                                </div>
                                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_collateral", additionalData = Model.Id })
                            }
                        </div>
                    </div>
                    @if (isProductPageLayoutOne)
                    {
						@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                        <div class="product-collateral">
                            @if (!string.IsNullOrEmpty(Model.FullDescription))
                            {
                                <div class="full-description">
                                    @Html.Raw(Model.FullDescription)
                                </div>
                            }
                            @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                            @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_collateral", additionalData = Model.Id })
                    }
                </div>
                <div class="product-page-grids @if (isProductPageLayoutOne) {<text>side-grids</text>}">
                    @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                    @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                    @if (isProductPageLayoutOne)
                    {
                    if (!string.IsNullOrEmpty(await categoryNavigation.RenderHtmlContentAsync()))
                    {
                            <div class="block block-category-navigation">
                                <div class="title">
                                    <strong>@T("Categories")</strong>
                                </div>
                                @categoryNavigation
                            </div>
                        }
                    }
                </div>
            </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>
