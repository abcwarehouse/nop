@model CompareProductsModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.CompareProducts").Text);
    //page class
    Html.AppendPageCssClassParts("html-compare-products-page");
}
@{
    var columnWidth = "";
    if (Model.Products.Count > 0)
    {
        columnWidth = Math.Round((decimal)(90M / Model.Products.Count), 0).ToString() + "%";
    }

    var uniqueGroupes = new List<ProductSpecificationAttributeGroupModel>();
    foreach (var group in Model.Products.SelectMany(p => p.ProductSpecificationModel.Groups))
    {
        if (!uniqueGroupes.Any(g => g.Id == group.Id))
            uniqueGroupes.Add(group);
    }
}
<div class="page compare-products-page">
    <div class="page-title">
        <h1>@T("Products.Compare.Title")</h1>
    </div>
    <div class="page-body">
        @if (Model.Products.Count > 0)
        {
            <a href="#" onclick="setLocation('@Url.RouteUrl("ClearCompareList")')" class="clear-list">@T("Products.Compare.Clear")</a>
            <div class="table-wrapper">
                <table class="compare-products-table">
                    <tbody>
                        <tr class="remove-product">
                            <td class="empty">&nbsp;</td>
                            @foreach (var product in Model.Products)
                            {
                                <td style="width: @columnWidth;">
                                    <button type="button" class="button-2 remove-button" onclick="setLocation('@Url.RouteUrl("RemoveProductFromCompareList", new { productId = product.Id })')">@T("Common.Remove")</button>
                                </td>
                            }
                        </tr>
                        <tr class="product-picture">
                            <td class="empty">&nbsp;</td>
                            @foreach (var product in Model.Products)
                            {
                                <td style="width: @columnWidth;">
                                    <a class="picture" href="@Url.RouteUrl("Product", new { SeName = product.SeName })"><img alt="@product.DefaultPictureModel.AlternateText" src="@product.DefaultPictureModel.ImageUrl" title="@product.DefaultPictureModel.Title" /></a>
                                </td>
                            }
                        </tr>
                        <tr class="product-name">
                            <td>
                                <label>@T("Products.Compare.Name")</label>
                            </td>
                            @foreach (var product in Model.Products)
                            {
                                <td style="width: @columnWidth;">
                                    <a href="@Url.RouteUrl("Product", new { SeName = product.SeName })">@product.Name</a>
                                </td>
                            }
                        </tr>
                        <tr class="product-price">
                            <td>
                                <label>@T("Products.Compare.Price")</label>
                            </td>
                            @foreach (var product in Model.Products)
                            {
                                <td style="width: @columnWidth;">
                                    @product.ProductPrice.Price
                                </td>
                            }
                        </tr>
                        @if (Model.IncludeShortDescriptionInCompareProducts)
                        {
                            <tr class="short-description">
                                <td>
                                    <label>@T("Products.Compare.ShortDescription")</label>
                                </td>
                                @foreach (var product in Model.Products)
                                {
                                    <td style="width: @columnWidth;">
                                        @Html.Raw(product.ShortDescription)
                                    </td>
                                }
                            </tr>
                        }
                        @foreach (var group in uniqueGroupes)
                        {
                            if (group.Attributes.Count > 0)
                            {
                                var uniqueGroupAttributes = new List<ProductSpecificationAttributeModel>();
                                foreach (var attribute in Model.Products.SelectMany(p => p.ProductSpecificationModel.Groups.Where(g => g.Id == group.Id).SelectMany(g => g.Attributes)))
                                {
                                    if (!uniqueGroupAttributes.Any(sa => sa.Id == attribute.Id))
                                        uniqueGroupAttributes.Add(attribute);
                                }
                                @foreach (var specificationAttribute in uniqueGroupAttributes)
                                {
                                    <tr class="specification">
                                        <td>
                                            <label>@specificationAttribute.Name</label>
                                        </td>
                                        @foreach (var product in Model.Products)
                                        {
                                            var foundProductSpec = product.ProductSpecificationModel.Groups
                                                .Where(g => g.Id == group.Id)
                                                .SelectMany(g => g.Attributes)
                                                .FirstOrDefault(sa => sa.Id == specificationAttribute.Id);

                                            <td style="width: @columnWidth;">
                                                @if (foundProductSpec != null)
                                                {
                                                    for (int i = 0; i < foundProductSpec.Values.Count; i++)
                                                    {
                                                        var value = foundProductSpec.Values[i];

                                                        if (string.IsNullOrEmpty(value.ColorSquaresRgb))
                                                        {
                                                            @Html.Raw(value.ValueRaw)
                                                            if (i != foundProductSpec.Values.Count - 1)
                                                            {
                                                                <text>,&nbsp;</text>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <div class="attribute-squares color-squares">
                                                                <span class="attribute-square-container" title="@Html.Raw(value.ValueRaw)">
                                                                    <span class="attribute-square" style="background-color: @(value.ColorSquaresRgb);">&nbsp;</span>
                                                                </span>
                                                            </div>
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    <text>&nbsp;</text>
                                                }
                                            </td>
                                        }
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
            </div>
            <table class="compare-products-table-mobile data-table">
                <thead>
                    <tr>
                        <th><span class="item-count">#</span></th>
                        <th data-hide="w480, w580, w768">@T("SevenSpikes.Themes.ProductRemove")</th>
                        <th data-hide="w410">@T("SevenSpikes.Themes.Picture")</th>
                        <th>@T("SevenSpikes.Themes.ProductCompareName")</th>
                        <th data-hide="w410, w480, w580">@T("Products.Compare.Price")</th>
                        @if (Model.IncludeShortDescriptionInCompareProducts)
                        {
                            <th data-hide="w410, w480, w580, w768, w980">@T("Products.Compare.ShortDescription")</th>
                        }
						@foreach (var group in uniqueGroupes)
						{
							var uniqueGroupAttributes = new List<ProductSpecificationAttributeModel>();
							foreach (var attribute in Model.Products.SelectMany(p => p.ProductSpecificationModel.Groups.Where(g => g.Id == group.Id).SelectMany(g => g.Attributes)))
							{
								if (!uniqueGroupAttributes.Any(sa => sa.Id == attribute.Id))
									uniqueGroupAttributes.Add(attribute);
							}
							@foreach (var specificationAttribute in uniqueGroupAttributes)
							{
								<th data-hide="w410, w480, w580, w768, w980">@specificationAttribute.Name</th>
							}
						}
					</tr>
                </thead>
                <tbody>
                    @{var counter = 0;}
                    @foreach (var product in Model.Products)
                    {
                        counter++;
                        <tr>
                            <td><span class="item-count">@counter</span></td>
                            <td>
                                <button type="button" title="@T("Common.Remove")" class="button-2 remove-button" onclick="setLocation('@Url.RouteUrl("RemoveProductFromCompareList", new { productId = product.Id })')">@T("Common.Remove")</button>
                            </td>
                            <td>
                                <img alt="@product.DefaultPictureModel.AlternateText" src="@product.DefaultPictureModel.ImageUrl" title="@product.DefaultPictureModel.Title" />
                            </td>
                            <td>
                                <a class="link" href="@Url.RouteUrl("Product", new { SeName = product.SeName })">@product.Name</a>
                            </td>
                            <td>
                                @product.ProductPrice.Price
                            </td>
                            @if (Model.IncludeShortDescriptionInCompareProducts)
                            {
                                <td>
                                    @Html.Raw(product.ShortDescription)
                                </td>
                            }
                            @foreach (var group in uniqueGroupes)
                            {
                                if (group.Attributes.Count > 0)
                                {
                                    var uniqueGroupAttributes = new List<ProductSpecificationAttributeModel>();
                                    foreach (var attribute in Model.Products.SelectMany(p => p.ProductSpecificationModel.Groups.Where(g => g.Id == group.Id).SelectMany(g => g.Attributes)))
                                    {
                                        if (!uniqueGroupAttributes.Any(sa => sa.Id == attribute.Id))
                                            uniqueGroupAttributes.Add(attribute);
                                    }
                                    @foreach (var specificationAttribute in uniqueGroupAttributes)
                                    {
                                        var attribute = product.ProductSpecificationModel.Groups
                                                 .Where(g => g.Id == group.Id).SelectMany(g => g.Attributes)
                                                 .FirstOrDefault(attr => attr.Id == specificationAttribute.Id);
                                        var values = attribute == null ? new List<ProductSpecificationAttributeValueModel>() : attribute.Values;

                                        if (attribute != null && attribute.Values.Count > 0)
                                        {
                                            <td>
                                                @{
                                                    var count = 0;
                                                }
                                                @foreach (var value in values)
                                                {
                                                    if (string.IsNullOrEmpty(value.ColorSquaresRgb))
                                                    {
                                                        @Html.Raw(value.ValueRaw)
                                                        if (count != values.Count - 1)
                                                        {
                                                            <text>,&nbsp;</text>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <div class="attribute-squares color-squares">
                                                            <span class="attribute-square-container" title="@Html.Raw(value.ValueRaw)">
                                                                <span class="attribute-square" style="background-color: @(value.ColorSquaresRgb);">&nbsp;</span>
                                                            </span>
                                                        </div>
                                                    }
                                                    count++;
                                                }
                                            </td>
                                        }
                                    }
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="no-data">
                @T("Products.Compare.NoItems")
            </div>
        }
    </div>
</div>

@section AsidePageTitle
{
    <div class="page-title">
        <h1>@T("Products.Compare.Title")</h1>
    </div>
}