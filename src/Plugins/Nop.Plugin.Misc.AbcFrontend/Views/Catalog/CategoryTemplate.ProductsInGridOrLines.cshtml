@model CategoryModel

@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@* custom *@
@using Microsoft.AspNetCore.Mvc.ViewComponents
@using Nop.Plugin.Misc.AbcCore.Infrastructure
@using Nop.Web.Framework.Infrastructure
@using Nop.Web.Models.Catalog;

@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@inject IViewComponentSelector viewComponentSelector

@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

	if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;

	@* custom *@
    Html.AddCssFileParts("~/Plugins/Misc.AbcFrontend/styles/product-box.css");
    Html.AddCssFileParts("~/Plugins/Misc.AbcFrontend/styles/product-listings.css");
    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/Misc.AbcFrontend/scripts/mobileFilters.js");

	/* Adding styles specific to categories */
    if (Model.Name == "Stearns & Foster")
    {
        Html.AddHeadCustomParts("<link rel='stylesheet' href='/Misc/StearnsAndFoster/css/style.css'>");
    }
}

@*category breadcrumb*@
@section Breadcrumb
{
	@if (Model.DisplayCategoryBreadcrumb)
	{
		<div class="breadcrumb">
			<ul>
				<li>
					<a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
					<span class="delimiter">@breadcrumbDelimiter</span>
				</li>
				@foreach (var cat in Model.CategoryBreadcrumb)
				{
					var isLastCategory = cat.Id == Model.Id;
					<li>
						@if (isLastCategory)
						{
							<strong class="current-item">@cat.Name</strong>
						}
						else
						{
							<a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name">@cat.Name</a>
							<span class="delimiter">@breadcrumbDelimiter</span>
						}
					</li>
				}
			</ul>
		</div>
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
	}
}

@section CatalogFilters {
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
    @await Html.PartialAsync("_CatalogFilters", Model.CatalogProductsModel)
}

<div class="page category-page">
	<div class="page-title">
		<h1>@Model.Name</h1>
	</div>
	<div class="page-body">
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsTopBelow480px, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsTopMin480px, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsTopMin768px, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsTopAbove1000px, additionalData = Model })
		@*description*@
		@if (!String.IsNullOrWhiteSpace(Model.Description))
		{
			<div class="category-description">
				@Html.Raw(Model.Description)
			</div>
		}
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model.Id })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeSubcategoriesBelow480px, additionalData = Model.Id })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeSubcategoriesMin480px, additionalData = Model.Id })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeSubcategoriesMin768px, additionalData = Model.Id })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeSubcategoriesAbove1000px, additionalData = Model.Id })
		@*subcategories*@
		@if (Model.SubCategories.Count > 0)
		{
			<div class="category-grid sub-category-grid">
				<div class="item-grid">
					@foreach (var item in Model.SubCategories)
					{
						<div class="item-box">
							<div class="sub-category-item">
								<h2 class="title">
									<a href="@Url.RouteUrl("Category", new {SeName = item.SeName})" title="@item.PictureModel.Title">
										@item.Name
									</a>
								</h2>
								<div class="picture">
									<a href="@Url.RouteUrl("Category", new {SeName = item.SeName})" title="@item.PictureModel.Title">
										<img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
									</a>
								</div>
							</div>
						</div>
					}
				</div>
			</div>
		}
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
		@*featured products*@
		@if (Model.FeaturedProducts.Count > 0)
		{
			<div class="product-grid featured-product-grid">
				<div class="title">
					<strong>@T("Products.FeaturedProducts")</strong>
				</div>
				<div class="item-grid">
					@foreach (var item in Model.FeaturedProducts)
					{
						<div class="item-box">
							@Html.Partial("_ProductBox", item)
						</div>
					}
				</div>
			</div>
		}
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
		@await Html.PartialAsync("_CatalogSelectors", Model.CatalogProductsModel)
        @await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })
        @{ 
            var catalogProductsViewData = new ViewDataDictionary(ViewData);
            catalogProductsViewData["fetchUrl"] = Html.Raw(Url.Action("GetCategoryProducts", "Catalog", new { categoryId = Model.Id }));
        }
        @await Html.PartialAsync("_CatalogProducts", Model.CatalogProductsModel, catalogProductsViewData)
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBottomBelow480px, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBottomMin480px, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBottomMin768px, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBottomAbove1000px, additionalData = Model })
	</div>
</div>
@section AsidePageTitle
{
	<div class="page-title">
		<h1>@Model.Name</h1>
	</div>
}