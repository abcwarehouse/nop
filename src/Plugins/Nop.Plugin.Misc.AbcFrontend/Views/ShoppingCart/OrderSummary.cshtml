@model ShoppingCartModel

@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Web.Models.ShoppingCart
@using Nop.Plugin.Misc.AbcCore.Services
@using Microsoft.AspNetCore.Mvc.ViewComponents
@using Nop.Plugin.Misc.AbcCore
@using Nop.Data
@using Nop.Core.Domain.Catalog
@using Nop.Plugin.Misc.AbcCore.Domain
@using Nop.Web.Framework.Infrastructure
@using Nop.Services.Catalog
@using Nop.Plugin.Misc.AbcCore.Extensions
@using Nop.Web.Extensions
@using Nop.Plugin.Misc.AbcCore.Infrastructure
@using Nop.Services.Common

@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject OrderSettings orderSettings
@inject IViewComponentSelector viewComponentSelector
@inject FrontEndService frontEndService
@inject IStoreContext storeContext
@inject IRepository<ProductAbcDescription> productAbcDescriptionRepository
@inject IRepository<Product> productRepository
@inject IProductService productService
@inject IGenericAttributeService genericAttributeService

@{
    bool isHawthorne = frontEndService.StoreIsHawthorne(await storeContext.GetCurrentStoreAsync());
    string changeDeliveryMethodButtonColor = isHawthorne ?
                                                await HtmlHelpers.GetPavilionPrimaryColorAsync() :
                                                await HtmlHelpers.GetPavilionAccentColorAsync();

    bool hasOutOfStockItemsInCart = Model.Items.FirstOrDefault(i => i.Warnings.Contains("Out of stock")) != null ||
                                    Model.Items.FirstOrDefault(i => i.Warnings.Contains("Please remove item from cart to continue.")) != null;
}
@{
    Html.AddCssFileParts("~/Plugins/AbcWarehouse.HomeDeliveryStatusWidget/Content/loading.css");
    Html.AddCssFileParts("~/Plugins/Misc.AbcFrontend/styles/product-price.css");
    Html.AddCssFileParts("~/Plugins/Misc.AbcFrontend/styles/product-box.css");
}
<style>
   .spinner > div {
    	background-color: #@await HtmlHelpers.GetPavilionPrimaryColorAsync();
    }
</style>
<script>
    $(document).on('click', '.change-delivery-method', function () {
            $('.change-delivery-method').attr('disabled', 'disabled');
            $('.spinner').show();
            $.ajax({
                cache: false,
                url: '/SwapDeliveryMethod/Change',
                data: { 'shoppingCartItemId': $(this).val() },
                type: 'post',
                success: success,
                error: error
            });
            return false;
        });

		$(document).on('click', '.remove-link', function () {
            $('.remove-link').attr('disabled', 'disabled');
            $('.spinner').show();
            $.ajax({
                cache: false,
                url: '/ShoppingCart/RemoveItem',
                data: { 'shoppingCartItemId': $(this).val() },
                type: 'post',
                success: success,
                error: error
            });
            return false;
        });

        function success(data) {
            $('.spinner').hide();
            if (data.RedirectUrl) {
                location.href = data.RedirectUrl;
            }
            else if (data.ErrorMessage) {
                $(data.ErrorMessageRecipient).show();
                $(data.ErrorMessageRecipient).empty();
                $(data.ErrorMessageRecipient).append(data.ErrorMessage);
                $('.change-delivery-method').removeAttr('disabled');
                return false;
            }
            else {
                location.href = "/cart";
            }
        }

        function error() {
            $('.spinner').hide();
            $('.change-delivery-method').removeAttr('disabled');
            alert('error');
        }
</script>


<style>
    .product-mini-description {
        font-size: 9pt;
        display: block;
        font-style: italic;
        margin-bottom: 7px;
    }
    .change-delivery-method {
    	outline: 1px solid transparent;
        padding: 5px 10px;
    	border: none;
    	color: white;
    	font-weight: bold;
    	background: #@changeDeliveryMethodButtonColor;
    }

    .change-delivery-method:hover {
    	outline-color: #@changeDeliveryMethodButtonColor;
    }

    .delivery-method-error {
        display: none;
        color: red;
    }

    .attributes {
        display: inline-block;
    }

    .edit-item {
        display: inline-block;
        margin-left: 12px;
    }

    .edit-item.edit-item a {
        color: blue;
    }
    .attributes.attributes.attributes {
        margin: 0px;
        margin-bottom: 7px;
    }

	.prices-bottom-message-mobile {
		color: #4f4f4f;
		margin-top: 0.5rem;
		font-size: 0.65rem;
		font-style: italic;
	}

	.message-error {
		font-weight: bold;
	}

	.shopping-cart-page .message-error-mobile {
		margin-bottom: 0;
	}

	button#checkout:disabled {
		background-color: #f2f2f2;
		color: #d9d9d9;
		cursor: not-allowed;
	}

	button#checkout:disabled:hover {
		outline-color: transparent;
	}

	.checkout-disabled-message {
		font-weight: bold;
		color: red;
		margin: 1rem 3rem;
	}

	button.remove-link {
	    font-weight: normal;
		text-decoration: underline;
		font-size: 0.7rem;
		display: block;
		color: #@await HtmlHelpers.GetPavilionPrimaryColorAsync();
		background-color: transparent;
		border: 0;
		margin: 1rem auto 0 auto;
	}

	@@media (min-width: 523px) {
		.prices-bottom-message-mobile,
		.shopping-cart-page .message-error-mobile {
			display: none;
		}
	}

	@@media (min-width: 811px) {
		td.product {
			width: 100%
		}

		button.remove-link {
			margin: 1rem 0 0 0;
		}
	}
</style>
<div class="order-summary-content">
    <div class="spinner hidden-loading">
        <div class="rect1"></div>
        <div class="rect2"></div>
        <div class="rect3"></div>
        <div class="rect4"></div>
        <div class="rect5"></div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentBefore })
    @Html.Partial("_OrderReviewData", Model.OrderReviewData)
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        <form asp-route="ShoppingCart" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            @Html.AntiForgeryToken()
            <div class="table-wrapper">
                <table class="cart">
                    <colgroup>
                        <col width="1" />
                        @if (Model.IsEditable)
                    {
                            <col width="1" />
                        }
                        @if (Model.ShowSku)
                    {
                            <col width="1" />
                        }
                        @if (Model.ShowProductImages)
                    {
                            <col width="1" />
                        }
                        <col />
                        <col width="1" />
                        <col width="1" />
                        <col width="1" />
                    </colgroup>
                    <thead>
                        <tr class="cart-header-row">
                            <th>
                                <span class="item-count">#</span>
                            </th>
                            @if (Model.ShowSku)
                            {
                                <th class="sku" data-hide="w410, w480, w580, w768, w980">
                                    @T("ShoppingCart.SKU")
                                </th>
                            }
                            @if (Model.ShowProductImages)
                            {
                                <th class="product-picture">
                                    @T("ShoppingCart.Image")
                                </th>
                            }
                            <th class="product" data-hide="w410, w480">
                                @T("ShoppingCart.Product(s)")
                            </th>
                            <th class="unit-price" data-hide="w410, w480, w580, w768">
                                @T("ShoppingCart.UnitPrice")
                            </th>
                            <th class="quantity" data-hide="w410, w480, w580, w768">
                                @T("ShoppingCart.Quantity")
                            </th>
                            <th class="subtotal">
                                @T("ShoppingCart.ItemTotal")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @{var counter = 0;}
                        @foreach (var item in Model.Items)
                        {

                            var miniDesc = "";
                            var pad = productAbcDescriptionRepository.Table.Where(p => p.Product_Id == item.ProductId).FirstOrDefault();
                            var product = await productService.GetProductByIdAsync(item.ProductId);
                            var plpDescription = await genericAttributeService.GetAttributeAsync<string>(
                                product, "PLPDescription");
                            if (!string.IsNullOrWhiteSpace(plpDescription))
                            {
                                miniDesc = plpDescription;
                            }
                            else if (pad != null)
                            {
                                miniDesc = pad.AbcDescription;
                            }
                            else
                            {
                                miniDesc = productRepository.Table.Where(p => p.Id == item.ProductId).FirstOrDefault().ShortDescription;
                            }

                            ProductFlag productFlag = frontEndService.GetProductFlag(item.ProductId);
                            string stockMessage = "";
                            string attributeInfo = item.AttributeInfo;
                            bool isOnlineOnly = productFlag != null && productFlag.PriceBucketImageUrl != null && productFlag.PriceBucketImageUrl.Contains("Online");

                            if (productFlag != null)
                            {
                                stockMessage = productFlag.StockMessage;
                            }
                            else if (!frontEndService.ProductIsAbc(item.ProductId))
                            {
                                stockMessage = "Normally ships in 2-3 weeks.";
                            }

                            counter++;
                            <tr class="cart-item-row">
                                <td>
                                    <span class="item-count">@counter</span>
                                </td>
                                @if (Model.ShowSku)
                                {
                                    <td class="sku">
                                        @item.Sku
                                    </td>
                                }
                                @if (Model.ShowProductImages)
                                {
                                    <td class="product-picture">
                                        <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
                                    </td>
                                }
                                <td class="product">
                                    <a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" class="product-name">@item.ProductName</a>
                                    <div class="product-mini-description">@Html.Raw(miniDesc)</div>
                                    @await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.OrderSummaryAfterProductMiniDescription, additionalData = item.ProductId })
                                    @if (!string.IsNullOrEmpty(attributeInfo))
                                    {
                                        <div class="attributes">
                                            @Html.Raw(@attributeInfo)
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(stockMessage))
                                    {
                                        <div class="prices-bottom-message">@stockMessage</div>
                                    }
                                    @if (stockMessage == "Normally ships in 2-3 weeks.")
                                    {
                                        <div style="font-size: 80%">Hold your place in line by purchasing now.  Deliveries are first come, first served.  There is potential for longer wait times due to manufacturer delays.</div>
                                    }
                                    @if (!string.IsNullOrEmpty(item.RecurringInfo))
                                    {
                                        <div class="recurring-info">
                                            @Html.Raw(item.RecurringInfo)
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(item.RentalInfo))
                                    {
                                        <div class="rental-info">
                                            @Html.Raw(item.RentalInfo)
                                        </div>
                                    }
                                    @if (Model.IsEditable)
                                    {
                                        var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName }, webHelper.CurrentRequestProtocol);
                                        editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid", item.Id.ToString());

                                        @* removed
                                        <div class="edit-item">
                                            <a href="@editCartItemUrl">@T("Common.Edit")</a>
                                        </div>
                                        *@
                                        
                                        if (!isOnlineOnly)
                                        {
                                            if (product.IsPickup())
                                            {
                                                bool isPickup = item.AttributeInfo.Contains("Pickup");
                                                string buttonMsg = isPickup ? "Change to Delivery" : "Change to Pickup in Store";
                                                if (isPickup)
                                                {
                                                    <div class="edit-item">
                                                        <a href="@editCartItemUrl">Change store</a>
                                                    </div>
                                                }
                                                <div class="change">
                                                    <button class="change-delivery-method" value="@item.Id">@buttonMsg</button>
                                                    <span id="change_method_error_@item.Id" class="delivery-method-error"></span>
                                                </div>
                                            }
                                        }
                                    }
                                    @if (item.Warnings.Count > 0)
                                    {
                                        <div class="message-error">
                                            <ul>
                                                @foreach (var warning in item.Warnings)
                                                {
                                                    <li>@warning</li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                </td>
                                <td class="unit-price">
                                    <span class="product-unit-price">@item.UnitPrice</span>
                                </td>
                                <td class="quantity">
                                    @if (Model.IsEditable)
                                    {
                                        if (item.AllowedQuantities.Count > 0)
                                        {
                                            <select name="itemquantity@(item.Id)" class="qty-dropdown">
                                                @foreach (var qty in item.AllowedQuantities)
                                                {
                                                    <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            <input name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" />
                                        }
                                    }
                                    else
                                    {
                                        <span>@item.Quantity</span>
                                    }
                                </td>
                                <td class="subtotal">
                                    <span class="product-subtotal">@item.SubTotal</span>
                                    @if (!String.IsNullOrEmpty(item.Discount))
                                    {
                                        <div class="discount">
                                            @T("ShoppingCart.ItemYouSave"): @item.Discount
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(stockMessage))
                                    {
                                        <div class="prices-bottom-message prices-bottom-message-mobile">@stockMessage</div>
                                    }
                                    @if (item.Warnings.Count > 0)
                                    {
                                        <div class="message-error message-error-mobile">
                                            <ul>
                                                @foreach (var warning in item.Warnings)
                                                {
                                                    <li>@warning</li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                    <button value="@item.Id" class="remove-link">Remove</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="cart-options">
                @if (Model.IsEditable)
                {
                    <div class="common-buttons">
                        <input type="submit" name="updatecart" value="@T("ShoppingCart.UpdateCart")" class="button-2 update-cart-button" />
                        <input type="submit" name="continueshopping" value="@T("ShoppingCart.ContinueShopping")" class="button-2 continue-shopping-button" />
                    </div>
                }
                @if (Model.CheckoutAttributes.Count > 0)
                {
                    @await Component.InvokeAsync("SelectedCheckoutAttributes")
                }
            </div>
            @if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
            {
                var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                //of course, you can modify appropriate locales to include VAT info there
                <div class="tax-shipping-info">
                    @T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeNameAsync("shippinginfo") }))
                </div>
            }

            <div class="cart-footer">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryCartFooter })
                @if (Model.IsEditable)
                {
                    <div class="cart-collaterals">                        
                        @{ 
                            var estimateShipping = (await Component.InvokeAsync("ShoppingCartEstimateShipping")).RenderHtmlContentAsync();
                        }

                        @if (!String.IsNullOrEmpty(estimateShipping))
                        {
                            <div class="accordion-tab estimate-shipping">
                                <div class="accordion-tab-title">
                                    <strong>@T("SevenSpikes.Themes.Pavilion.EstimateShipping")</strong>
                                </div>
                                <div class="accordion-tab-content">
                        			@await Component.InvokeAsync("ShoppingCartEstimateShipping")
                                </div>
                            </div>
                        }
                        @if (Model.DiscountBox.Display)
                        {
                            <div class="accordion-tab coupon-codes">
                                <div class="accordion-tab-title">
                                    <strong>@T("ShoppingCart.DiscountCouponCode")</strong>
                                </div>
                                <div class="accordion-tab-content">
                                    @await Html.PartialAsync("_DiscountBox", Model.DiscountBox)
                                </div>
                            </div>
                        }
                        @if (Model.GiftCardBox.Display)
                        {
                            <div class="accordion-tab gift-cards">
                                <div class="accordion-tab-title">
                                    <strong>@T("ShoppingCart.GiftCardCouponCode")</strong>
                                </div>
                                <div class="accordion-tab-content">
                                    @await Html.PartialAsync("_GiftCardBox", Model.GiftCardBox)
                                </div>
                            </div>
                        }
						@await Html.PartialAsync("_CheckoutAttributes", Model)
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentDeals })
                    </div>
                } 
                <div class="totals">
                	@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryTotals })
                    @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                    @if (Model.IsEditable)
                    {
                        if (!string.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                        {
                            <div class="min-amount-warning">
                                @Model.MinOrderSubtotalWarning
                            </div>
                        }
                    }
                    @if (Model.IsEditable)
                    {
                        if (Model.TermsOfServiceOnShoppingCartPage)
                        {
                            <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                            </div>
                            <div class="terms-of-service">
                                <div>
                                    <input id="termsofservice" type="checkbox" name="termsofservice" />
                           			<label for="termsofservice">@T("Checkout.TermsOfService.IAccept")</label>
									@if (Model.TermsOfServicePopup)
	                                {
	                                    <a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
                                        <script asp-location="Footer">
	                                        $(document).ready(function() {
	                                            $('#read-terms').on('click',
	                                                function(e) {
	                                                    e.preventDefault();
	                                                    displayPopupContentFromUrl(
	                                                        '@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})',
	                                                        '@T("Checkout.TermsOfService")');
	                                                });
	                                        });
                                        </script>
	                                }
	                                else
	                                {
	                                    <a class="read" id="read-terms" href="@Url.RouteUrl("Topic", new {SeName = await Html.GetTopicSeNameAsync("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a>
	                                }
                                </div>
                            </div>
                        }
                        <div class="checkout-buttons">
                            @if (string.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                            {
                                <script asp-location="Footer">
                                    $(document).ready(function () {
                                        $('#checkout').on('click', function () {
                                            //terms of service
                                            var termOfServiceOk = true;
                                            if ($('#termsofservice').length > 0) {
                                                //terms of service element exists
                                                if (!$('#termsofservice').is(':checked')) {
                                                    $("#terms-of-service-warning-box").dialog();
                                                    termOfServiceOk = false;
                                                } else {
                                                    termOfServiceOk = true;
                                                }
                                            }
                                            return termOfServiceOk;
                                        });
                                    });
                                </script>
                                if (orderSettings.CheckoutDisabled)
                                {
                                    <div class="checkout-disabled">
                                        @T("Checkout.Disabled")
                                    </div>
                                }
                                else
                                {
	                                <button type="submit" id="checkout" name="checkout" value="checkout" class="button-1 checkout-button">
	                                    @T("Checkout.Button")
	                                </button>
                                }
                            }
                        </div>
                        
                        if (Model.ButtonPaymentMethodViewComponentNames.Count > 0)
                        {
                            <div class="addon-buttons">
	                            @*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
	                            @foreach (var pm in Model.ButtonPaymentMethodViewComponentNames)
	                            {
	                                @await Component.InvokeAsync(pm)
	                            }
	                        </div>
                        }
                        
                    }
                </div>
            </div>
            @if (Model.IsEditable)
            {
                @await Component.InvokeAsync("CrossSellProducts")
            }
        </form>
    }
    else
    {
        <div class="no-data">
            @T("ShoppingCart.CartIsEmpty")
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OrderSummaryContentAfter })
</div>
