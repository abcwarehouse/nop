@* adding mobile class for header *@

@using Nop.Core
@using Nop.Core.Infrastructure
@using Nop.Services.Configuration
@using Nop.Plugin.Misc.AbcFrontend.Services
@using Nop.Plugin.Misc.AbcCore.Services

@inject IStoreContext storeContext
@inject ISettingService settingService
@* custom *@
@using Nop.Services.Orders
@using Nop.Core.Domain.Orders
@inject IWorkContext workContext
@inject FrontEndService frontEndService
@inject IShoppingCartService shoppingCartService

@{
    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var actionName = Url.ActionContext.RouteData.Values["action"].ToString();
    var isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase) &&
                        actionName.Equals("index", StringComparison.InvariantCultureIgnoreCase);

    var currentStore = storeContext.CurrentStore;
    int storeId = currentStore.Id;
    bool isHomeSliderFullWidth = settingService.GetSettingByKey("pavilionthemesettings.ishomepagemainsliderfullwidth", false, storeId, true);
    bool stickyCategoryMenuFlyout = settingService.GetSettingByKey("pavilionthemesettings.StickyCategoryMenuFlyout", true, storeId, true);
    bool showCategoriesInSideMenu = settingService.GetSettingByKey("pavilionthemesettings.ShowCategoriesInSideMenu", true, storeId, true);
    
    @* custom *@
    var customer = workContext.CurrentCustomer;
    var shoppingCartItems = shoppingCartService.GetShoppingCart(
        customer,
        ShoppingCartType.ShoppingCart
    );
    var cartItemCount = 0;
    foreach (var shoppingCartItem in shoppingCartItems)
    {
        cartItemCount += shoppingCartItem.Quantity;
    }

    bool isHawthorne = frontEndService.StoreIsHawthorne(currentStore);
    bool isHawthorneClearance = frontEndService.StoreIsHawthorneClearance(currentStore);

    Html.AddCssFileParts("~/Plugins/Misc.AbcFrontend/styles/mobile-header.css");

    if (isHawthorne || isHawthorneClearance)
    {
        Html.AddCssFileParts("~/Plugins/Misc.AbcFrontend/styles/mobile-header-haw.css");
        Html.AddCssFileParts("~/Plugins/Misc.AbcFrontend/styles/header-haw.css");
    }

    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/Misc.AbcFrontend/scripts/mobileMenu.js");
}

<div class="header">
    @await Component.InvokeAsync("Widget", new { widgetZone = "header" })

    <div class="header-mobile">
        <div class="header-logo-mobile">
            @await Component.InvokeAsync("Logo")
        </div>
        <div class="header-navbar-mobile">
            <div class="phone"><a href="/contact-us">800-981-3866</a></div>
            <div class="mobile-personal">
                <a href="/customer/info">
                    <span>Account</span>
                </a>
            </div>
            <div class="mobile-cart">
                <a href="/cart">
                    <span>Cart</span>
                </a>
                @if (@cartItemCount > 0)
                {
                    <div class="mobile-cart-qty">@cartItemCount</div>
                }
            </div>
        </div>
        <div class="header-content-row">
            <div class="mobile-menu" onClick="toggleMobileMenu()">
                <span>Menu</span>
            </div>
            <script type="text/javascript">
                function ajaxsearchsubmit(form) {
                    var search = encodeURIComponent(form.w.value);
                    document.activeElement.blur();
                    window.location = "https://appliances.abcwarehouse.com/search?w=" + search;
                    return false;
                }
            </script>

            <form action="//appliances.abcwarehouse.com/search" id="mobile-small-search-box-form" method="get" novalidate="novalidate" onsubmit="return ajaxsearchsubmit(this);" _lpchecked="1">
                <label for="sli_search_1" id="search_label">
                    <span style="display: none">Search:</span>
                    <input type="text" class="search-box-text valid" id="sli_search_1" autocomplete="off" name="w" data-provide="rac" placeholder="Search" aria-label="Search" aria-labelledby="search_label">
                </label>
                <input type="hidden" style="display:none;" id="mobile_sli_search_2" name="AbcClearanceStore" value="False">
                <input type="submit" class="mobile-search-button" value="Search">
            </form>
        </div>
    </div>

    <div class="header-upper">
        <div class="center">
            @await Component.InvokeAsync("AdminHeaderLinks")
            @{
                var taxTypeSelectorHtml = await Component.InvokeAsync("TaxTypeSelector");
                var currencySelectorHtml = await Component.InvokeAsync("CurrencySelector");
                var languageSelectorHtml = await Component.InvokeAsync("LanguageSelector");
                var headerSelectorWidgetHtml = await Component.InvokeAsync("Widget", new { widgetZone = "header_selectors" });
            }

            @if (!String.IsNullOrEmpty(taxTypeSelectorHtml.ToHtmlString()) ||
                 !String.IsNullOrEmpty(currencySelectorHtml.ToHtmlString()) ||
                 !String.IsNullOrEmpty(languageSelectorHtml.ToHtmlString()) ||
                 !String.IsNullOrEmpty(headerSelectorWidgetHtml.ToHtmlString()))
            {
                <div class="header-selectors-wrapper">
                    <label>@T("SevenSpikes.Themes.Pavilion.Header.Preferences")</label>
                    <div class="header-selectors">
                        @taxTypeSelectorHtml
                        @currencySelectorHtml
                        @languageSelectorHtml
                        @headerSelectorWidgetHtml
                    </div>
                </div>
                <div class="header-selector-widget" style="display: none;">@headerSelectorWidgetHtml</div>
            }
            <div class="header-links-wrapper">
                <label>@T("SevenSpikes.Themes.Pavilion.Header.MyAccount")</label>
                @await Component.InvokeAsync("HeaderLinks")
            </div>
        </div>
    </div>

    <div class="header-middle">
        <div class="center">
            <div class="header-logo">
                @await Component.InvokeAsync("Logo")
            </div>
            <div class="header-menu-parent">
                <div class="header-menu mobile-sidebar-panel @if (showCategoriesInSideMenu){<text>categories-in-side-panel</text>}">
                    <div class="close-menu">
                        <span>@T("SevenSpikes.Themes.Common.CloseMenu")</span>
                    </div>
                    @{
                        var menuHtml = await Component.InvokeAsync("Widget", new { widgetZone = "theme_header_menu" });
                    }
                    @if (!String.IsNullOrEmpty(menuHtml.ToHtmlString()))
                    {
                        @menuHtml
                    }
                    else
                    {
                        @await Component.InvokeAsync("TopMenu")
                    }
                </div>
            </div>
            @await Component.InvokeAsync("FlyoutShoppingCart")
        </div>
    </div>

    <div class="header-lower">
        <div class="center">
            @if (showCategoriesInSideMenu)
            {
                <span class="category-navigation-title">@T("SevenSpikes.Themes.Pavilion.Header.AllCategories")</span>

                if (!isHomePage || isHomeSliderFullWidth)
                {
                    <div class="category-navigation-list-wrapper">
                        <ul class="category-navigation-list @if (stickyCategoryMenuFlyout){<text>sticky-flyout</text>}"></ul>
                    </div>
                }
            }
            <div class="search-box store-search-box @if (!showCategoriesInSideMenu){<text>full-width</text>}">
                @await Component.InvokeAsync("SearchBox")
            </div>

        </div>
    </div>
</div>

@if (isHomePage)
{
    var homePageSliderCss = isHomeSliderFullWidth ? "slider-fullwidth" : "slider-right-column";

    <div class="two-columns-area @homePageSliderCss">
        @if (isHomeSliderFullWidth)
        {
            @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_main_slider" });
            @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_search_widget" })
        }

        <div class="center">
            <div class="two-colums-area-left">
                @if (showCategoriesInSideMenu && !isHomeSliderFullWidth)
                {
                    <div class="category-navigation-list-wrapper">
                        <ul class="category-navigation-list @if (stickyCategoryMenuFlyout){<text>sticky-flyout</text>}"></ul>
                    </div>
                }
                @await Component.InvokeAsync("HomepageProducts")
            </div>
            <div class="two-colums-area-right">
                @if (!isHomeSliderFullWidth)
                {
                    @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_main_slider" });
                    @await Component.InvokeAsync("Widget", new { widgetZone = "home_page_search_widget" })

                }
                @await Component.InvokeAsync("Widget", new { widgetZone = "homepage_slider_after" })
            </div>
        </div>
    </div>
}