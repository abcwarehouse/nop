@using Nop.Core
@using Nop.Services.Configuration
@using Nop.Web.Framework.Infrastructure
@* ABC: for shopping cart item count *@
@using Nop.Services.Orders
@using Nop.Core.Domain.Orders

@inject IStoreContext storeContext
@inject ISettingService settingService
@* ABC: for shopping cart item count *@
@inject IWorkContext workContext
@inject IShoppingCartService shoppingCartService

@{
    Layout = "_Root.Head";

    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var actionName = Url.ActionContext.RouteData.Values["action"].ToString();
    var isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase) && actionName.Equals("index", StringComparison.InvariantCultureIgnoreCase);

    var storeId = (await storeContext.GetCurrentStoreAsync()).Id;
    bool isLogoStickyOnMobileDevice = await settingService.GetSettingByKeyAsync("pavilionthemesettings.islogostickyonmobiledevice", false, storeId, true);
    string stickyLogoClass = isLogoStickyOnMobileDevice ? "mobile-sticky-logo" : string.Empty;

    @* ABC: for shopping cart item count *@
    var customer = await workContext.GetCurrentCustomerAsync();
    var shoppingCartItemCount = (await shoppingCartService.GetShoppingCartAsync(
        customer,
        ShoppingCartType.ShoppingCart
    )).Count();
}

@* styles to be moved into CSS file *@
<style>
    /* remove admin header */
    .admin-header-links {
        display: none
    }
    .admin-header-links ~ .responsive-nav-wrapper-parent {
        top: 0;
    }
    .admin-header-links ~ .responsive-nav-wrapper-parent .header-links {
        top: 53px;
    }

    /* sets up flex for centering */
    .responsive-nav-wrapper {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        margin: 0 0.5rem;
    }

    /* vertically center logo */
    .responsive-nav-wrapper > div > a.logo {
        height: auto;
    }
    .responsive-nav-wrapper > div > a.logo img {
        width: 140px;
    }

    /* need to revert Pavilion CSS, used for mobile logo */
    .responsive-nav-wrapper > div:first-child {
        border-left: 0;
        background: transparent;
    }
    .responsive-nav-wrapper > div {
        border-right: 0;
        background-image: url(/Plugins/Misc.AbcFrontend/Images/mobile-sprite.png);
    }
    
    /* phone number gets special rules */
    .responsive-nav-wrapper > div.phone {
        margin-left: auto;
        background-image: none;
        background-color: transparent;
    }
    .responsive-nav-wrapper > div.phone > a {
        font-size: 0.75rem;
        width: auto;
        height: auto;
    }

    /* hides provided header logo for mobile */
    .header-logo {
        display: none;
    }
    .responsive-nav-wrapper-parent {
        position: relative;
    }
    .master-wrapper-content {
        margin-top: 0;
    }

    /* quantity for mobile shopping cart */
    div.mobile-cart-qty {
        width: 15px;
        line-height: 10px;
        border-radius: 50%;
        text-align: center;
        font-size: 10px;
        border: 2px solid red;
        background: red;
        color: #fff;
        font-weight: bold;
        position: absolute;
        right: 5px;
        top: 10px;
    }
</style>

@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyStartHtmlTagAfter })
@await Html.PartialAsync("_Notifications")
@await Html.PartialAsync("_JavaScriptDisabledWarning")
@await Html.PartialAsync("_OldInternetExplorerWarning")

<div class="master-wrapper-page @stickyLogoClass">
    @await Html.PartialAsync("_Header")
    <script asp-location="Footer">
        var localized_data = {
            AjaxCartFailure: "@T("AjaxCart.Failure")"
        };
        AjaxCart.init(false, '.header-links .cart-qty', '.header-links .wishlist-qty', '#flyout-cart', localized_data);
    </script>
    <div class="overlayOffCanvas"></div>
    @* ABC: customizing mobile nav. *@
    <div class="responsive-nav-wrapper-parent">
        <div class="responsive-nav-wrapper">
            <div id="mobile-header-logo">
                @await Component.InvokeAsync("Logo")
            </div>
            <div class="phone"><a href="/contact-us">800-981-3866</a></div>
            <div class="personal-button" id="header-links-opener">
                <span>@T("SevenSpikes.Themes.Common.Personal")</span>
            </div>
            <div class="shopping-cart-link">
                <a href="/cart">
                    <span>@T("ShoppingCart")</span>
                    @if (@shoppingCartItemCount > 0)
                    {
                        <div class="mobile-cart-qty">@shoppingCartItemCount</div>
                    }
                </a>
            </div>
        </div>
    </div>
    <div class="master-wrapper-content">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentBefore })
		@await Component.InvokeAsync("Widget", new { widgetZone = "pavilion_color_squares" })

        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ContentAfter })
    </div>
    @if (isHomePage)
    {
		@await Component.InvokeAsync("Widget", new { widgetZone = "homepage_content_after" })
    }

    @await Component.InvokeAsync("Footer")
</div>

@await Component.InvokeAsync("EuCookieLaw")
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BodyEndHtmlTagBefore })
