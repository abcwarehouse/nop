@model CategoryModel

@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@using Nop.Plugin.Misc.AbcCore.Services
@using Microsoft.AspNetCore.Mvc.ViewComponents
@using Nop.Web.Framework.Infrastructure
@using Nop.Plugin.Misc.AbcCore.Infrastructure
@using Nop.Web.Extensions

@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@inject IViewComponentSelector viewComponentSelector
@* custom *@
@inject FrontEndService frontEndService

@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");

	if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;

	@* custom *@
    Html.AddCssFileParts("~/Plugins/Misc.AbcFrontend/styles/product-box.css");
    Html.AddCssFileParts("~/Plugins/Misc.AbcFrontend/styles/product-listings.css");

    // boolean if there are any parent categories
    bool hasChildCategories = frontEndService.CategoryHasChildren(Model.Id);

    var category = Model.MetaTitle;
    bool isFloorcareAccessories = Model.Name == "Floorcare Accessories";

    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/Misc.AbcFrontend/scripts/mobileFilters.js");
}

@using Nop.Core.Domain.Common;
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;
@using Nop.Services.Catalog;

@if (Model.Name == "Furniture" || Model.Name == "Mattresses")
{
	<style>
		.sub-category-item .title.title {
			bottom: 1em;
			position: absolute;
			top: initial;
		}
	</style>
}

@if (Model.Name == "Floorcare Accessories")
{
	<style>
		.item-grid {
			margin-top: 4em;
		}
	</style>
}
<script>
    // check if it's a leaf category
    $(function () {
        var isLeaf = @Html.Raw(!hasChildCategories ? "true" : "false");
        var isFloorcareAccessoriesPage = @Html.Raw(isFloorcareAccessories ? "true" : "false");
        if (isLeaf || isFloorcareAccessoriesPage) {
            // show product display
            $('.product-selectors').show();
            $('.product-grid').show();
            $('.pager').show();

            // show filters
            $('.filters-button').show();
            $('.nopAjaxFilters7Spikes').show();

            // remove category filters
            var specificationPanels = $('.specificationFilterPanel7Spikes');

            var i;
            for (i = 0; i < specificationPanels.length; i++) {
                var anchorTitle = $(specificationPanels[i]).find('.toggleControl');
                var title = $(anchorTitle).text();
                if (title.toLowerCase() === 'category') {
                    $(specificationPanels[i]).hide();
                }
            }
        }
        else {
            // hide product display
            $('.product-selectors').hide();
            $('.product-grid').hide();
            $('.pager').hide();

            // hide filters
            $('.filters-button').hide();
            $('.nopAjaxFilters7Spikes').hide();

            // we have to remove the filter button in case of mobile
            $('.filters-button').remove();
        }
    });

    function viewAll() {
        var url=window.location.href;
        var hasFilters = url.indexOf("#")!==-1;

        if (hasFilters){
            var newUrl=url.replace("pageSize=20","pageSize=1000");

            var pageNumIdxStart = newUrl.indexOf("pageNumber=");
            var pageNumIdxEnd = newUrl.indexOf("&", pageNumIdxStart);
            if (pageNumIdxEnd === -1){
                pageNumIdxEnd = newUrl.length;
            }
            newUrl = newUrl.replace(newUrl.substring(pageNumIdxStart,pageNumIdxEnd), "pageNumber=1");
            window.location.href =newUrl;
        }
        else{
            var separator = (url.indexOf("?")===-1)?"?":"&";
            var newParam=separator + "pagesize=1000";
            var newUrl2=url.replace(newParam,"");
            newUrl2+=newParam;

            window.location.href =newUrl2;
        }
    }
</script>
@*category breadcrumb*@
@section Breadcrumb
{
	@if (Model.DisplayCategoryBreadcrumb)
	{
		<div class="breadcrumb">
			<ul>
				<li>
					<a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
					<span class="delimiter">@breadcrumbDelimiter</span>
				</li>
				@foreach (var cat in Model.CategoryBreadcrumb)
				{
					var isLastCategory = cat.Id == Model.Id;
					<li>
						@if (isLastCategory)
						{
							<strong class="current-item">@cat.Name</strong>
						}
						else
						{
							<a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name">@cat.Name</a>
							<span class="delimiter">@breadcrumbDelimiter</span>
						}
					</li>
				}
			</ul>
		</div>
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterBreadcrumb, additionalData = Model })
	}
}
<div class="page category-page">
	@if (hasChildCategories)
	{
		<div class="page-title">
			<h1>@Model.Name</h1>
		</div>
	}
	<div class="page-body">
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsTopBelow480px, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsTopMin480px, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsTopMin768px, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsTopAbove1000px, additionalData = Model })
		@if (hasChildCategories == false)
		{
			<h1 class="leaf-category-title">@Model.Name</h1>
		}
		@if (Model.Products.Count > 0)
		{
			<div class="product-selectors">
				@*DFar: open filters for mobile*@
				<div id="mobile-filters-wrapper">
					<button id="mobile-filters" onclick="toggleMobileFilters()"><i class="fas fa-filter"></i>Filters</button>
				</div>

				@*sorting*@
				@if (Model.PagingFilteringContext.AllowProductSorting)
				{
					<div class="product-sorting">
						<span>@T("Catalog.OrderBy")</span>
						@Html.DropDownList("products-orderby", Model.PagingFilteringContext.AvailableSortOptions, new { onchange = "setLocation(this.value);" })
					</div>
				}
			</div>
		}
		@*description*@
		@if (!String.IsNullOrWhiteSpace(Model.Description))
		{
			<div class="category-description">
				@Html.Raw(Model.Description)
			</div>
		}
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model.Id })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeSubcategoriesBelow480px, additionalData = Model.Id })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeSubcategoriesMin480px, additionalData = Model.Id })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeSubcategoriesMin768px, additionalData = Model.Id })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeSubcategoriesAbove1000px, additionalData = Model.Id })
		@*subcategories*@
		@if (Model.SubCategories.Count > 0)
		{
			<div class="category-grid sub-category-grid">
				<div class="item-grid">
					@foreach (var item in Model.SubCategories)
					{
						<div class="item-box">
							<div class="sub-category-item">
								<h2 class="title">
									<a href="@Url.RouteUrl("Category", new {SeName = item.SeName})" title="@item.PictureModel.Title">
										@item.Name
									</a>
								</h2>
								<div class="picture">
									<a href="@Url.RouteUrl("Category", new {SeName = item.SeName})" title="@item.PictureModel.Title">
										<img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
									</a>
								</div>
								@await Component.InvokeAsync("Widget", new { widgetZone = "subcategories_itembox_end", additionalData = item.Id })
							</div>
						</div>
					}
				</div>
			</div>
		}
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
		@*featured products*@
		@if (Model.FeaturedProducts.Count > 0)
		{
			<div class="product-grid featured-product-grid">
				<div class="title">
					<strong>@T("Products.FeaturedProducts")</strong>
				</div>
				<div class="item-grid">
					@foreach (var item in Model.FeaturedProducts)
					{
						<div class="item-box">
							@Html.Partial("_ProductBox", item)
						</div>
					}
				</div>
			</div>
		}
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })
		@if (Model.Products.Count > 0)
		{
			<div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
				<div class="item-grid">
					@foreach (var product in Model.Products)
					{
						var index = product.Name.LastIndexOf(' ');
						string man = "";
						string manNo = "";
						//Name does not conform to standard of [manufacturer] [sku]
						if (index < 0)
						{
							manNo = product.Name;
						}
						else
						{
							man = product.Name.Substring(0, index);
							manNo = product.Name.Substring(index);
						}
					<div class="item-box">
						@Html.Partial("_ProductBox", product)
					</div>
					}
				</div>
			</div>
		}
		@{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
			// CUSTOM: view all button
			if (!hasChildCategories)
			{
				<div><a onclick="viewAll();">View All</a></div>
			}
            <div class="pager">
                @pager
            </div>
        }
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBottomBelow480px, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBottomMin480px, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBottomMin768px, additionalData = Model })
		@await Component.InvokeAsync("Widget", new { widgetZone = CustomPublicWidgetZones.CategoryDetailsBottomAbove1000px, additionalData = Model })
	</div>
</div>
<script>
	function viewAll() {
        var url=window.location.href;
        var hasFilters = url.indexOf("#")!==-1;

        if (hasFilters){
            var newUrl=url.replace("pageSize=20","pageSize=1000");

            var pageNumIdxStart = newUrl.indexOf("pageNumber=");
            var pageNumIdxEnd = newUrl.indexOf("&", pageNumIdxStart);
            if (pageNumIdxEnd === -1){
                pageNumIdxEnd = newUrl.length;
            }
            newUrl = newUrl.replace(newUrl.substring(pageNumIdxStart,pageNumIdxEnd), "pageNumber=1");
            window.location.href =newUrl;
        }
        else{
            var separator = (url.indexOf("?")===-1)?"?":"&";
            var newParam=separator + "pagesize=1000";
            var newUrl2=url.replace(newParam,"");
            newUrl2+=newParam;

            window.location.href =newUrl2;
        }
    }
</script>
@section AsidePageTitle
{
	@*only use side title if category is non-leaf*@
	@if (hasChildCategories)
	{
		<div class="page-title">
			<h1>@Model.Name</h1>
		</div>
	}
}